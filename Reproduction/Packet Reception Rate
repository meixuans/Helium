#include "LoRaWAN.h"
#include "TimerMillis.h"
#include <CayenneLPP.h>

const char *devEui = "6081F9D499665A68";
const char *appEui = "6081F99CD641F555";
const char *appKey = "78E6CA47EF943377E4D6FF293DD149F7";

uint32_t GLOBAL_COUNTER;
int SEND_PACKET_INTERVAL;
TimerMillis transmitTimer;

void call_back_join(void) {
    if (LoRaWAN.joined()) {
        Serial.println("Joined");
        transmitTimer.start(call_back_transmit, 0, SEND_PACKET_INTERVAL);
    } else {
        Serial.println("rejoin begin - call back join");
        LoRaWAN.rejoinOTAA();
    }
}

void call_back_receive(void) {
    //nothing to receive
}

void call_back_transmit(void) {
    if (!LoRaWAN.busy()) {
        if (!LoRaWAN.linkGateways()) {
            transmitTimer.stop();
            Serial.println("rejoin begin - call back transmit");
            LoRaWAN.rejoinOTAA();
        }
        
        if (LoRaWAN.joined()) {
            GLOBAL_COUNTER++;
            
            LoRaWAN.beginPacket();
            LoRaWAN.write(0xef);
            LoRaWAN.write(0xbe);
            LoRaWAN.write(0xad);
            LoRaWAN.write(0xde);
            //Require acknowledgment
            LoRaWAN.endPacket(true);

            Serial.print("TRANSMIT( ");
            Serial.print("TimeOnAir: ");
            Serial.print(LoRaWAN.getTimeOnAir());
            Serial.print("dbm, UpLinkCounter: ");
            Serial.print(LoRaWAN.getUpLinkCounter());
            Serial.print(", DownLinkCounter: ");
            Serial.print(LoRaWAN.getDownLinkCounter());
            Serial.println(" )");
            
            while (LoRaWAN.busy()) {
            }
            
            if (LoRaWAN.confirmed()) {
                Serial.println("ACK received");
            } else {
                Serial.println("NACK");
            }
        }
    }
}

void setup(void) {
    Serial.begin(115200);
    Serial.println("Setup begin");
    
    LoRaWAN.begin(US915);

    GLOBAL_COUNTER = 0;
    SEND_PACKET_INTERVAL = 2000;

    LoRaWAN.onJoin(call_back_join);
    LoRaWAN.onTransmit(call_back_receive);
    LoRaWAN.onReceive(call_back_transmit);
    LoRaWAN.joinOTAA(appEui, appKey, devEui);

    Serial.println("Setup finish");
}

void loop(void) {
    //set up a timer to call TRANMIT function
}
